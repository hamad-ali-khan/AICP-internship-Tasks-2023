#include <iostream>
#include <vector>
#include <iomanip>

const int NUM_TRAIN_JOURNEYS = 4;
const int COACH_CAPACITY = 80;
const int TICKET_PRICE = 25;
const int GROUP_DISCOUNT_THRESHOLD = 10;

class ElectricMountainRailway {
private:
    int available_tickets_up[NUM_TRAIN_JOURNEYS];
    int available_tickets_down[NUM_TRAIN_JOURNEYS];
    int total_passengers_up[NUM_TRAIN_JOURNEYS];
    int total_passengers_down[NUM_TRAIN_JOURNEYS];
    int total_money_up[NUM_TRAIN_JOURNEYS];
    int total_money_down[NUM_TRAIN_JOURNEYS];

public:
    ElectricMountainRailway() {
        // Initialize ticket availability for each journey
        for (int i = 0; i < NUM_TRAIN_JOURNEYS; ++i) {
            available_tickets_up[i] = COACH_CAPACITY;
            available_tickets_down[i] = COACH_CAPACITY;
            total_passengers_up[i] = 0;
            total_passengers_down[i] = 0;
            total_money_up[i] = 0;
            total_money_down[i] = 0;
        }
    }

    void displayScreen() {
        // Display the current ticket availability
        std::cout << "Train Schedule:" << std::endl;
        std::cout << "Up:   09:00 | 11:00 | 13:00 | 15:00" << std::endl;
        std::cout << "Down: 10:00 | 12:00 | 14:00 | 16:00" << std::endl;

        for (int i = 0; i < NUM_TRAIN_JOURNEYS; ++i) {
            std::cout << "Up " << i + 1 << ": ";
            if (available_tickets_up[i] > 0) {
                std::cout << available_tickets_up[i] << " tickets available";
            } else {
                std::cout << "Closed";
            }
            std::cout << " | $" << total_money_up[i] << " total" << std::endl;

            std::cout << "Down " << i + 1 << ": ";
            if (available_tickets_down[i] > 0) {
                std::cout << available_tickets_down[i] << " tickets available";
            } else {
                std::cout << "Closed";
            }
            std::cout << " | $" << total_money_down[i] << " total" << std::endl;
        }
        std::cout << std::endl;
    }

    void purchaseTickets() {
        std::string journeyType;
        int journeyIndex;
        int numTickets;

        // Prompt user for ticket purchase details
        std::cout << "Enter journey type (Up/Down): ";
        std::cin >> journeyType;

        if (journeyType != "Up" && journeyType != "Down") {
            std::cout << "Invalid journey type. Exiting." << std::endl;
            return;
        }

        std::cout << "Enter journey index (1-4): ";
        std::cin >> journeyIndex;

        if (journeyIndex < 1 || journeyIndex > NUM_TRAIN_JOURNEYS) {
            std::cout << "Invalid journey index. Exiting." << std::endl;
            return;
        }

        std::cout << "Enter number of tickets: ";
        std::cin >> numTickets;

        if (numTickets <= 0 || numTickets > COACH_CAPACITY) {
            std::cout << "Invalid number of tickets. Exiting." << std::endl;
            return;
        }

        // Perform ticket purchase
        if (journeyType == "Up") {
            purchaseTicketsForJourney(available_tickets_up, total_passengers_up, total_money_up, journeyIndex - 1, numTickets);
        } else {
            purchaseTicketsForJourney(available_tickets_down, total_passengers_down, total_money_down, journeyIndex - 1, numTickets);
        }
    }

    void endOfDayReport() {
        std::cout << "\nEnd of Day Report:" << std::endl;
        for (int i = 0; i < NUM_TRAIN_JOURNEYS; ++i) {
            std::cout << "Up " << i + 1 << ": " << total_passengers_up[i] << " passengers | $"
                      << total_money_up[i] << " total" << std::endl;
            std::cout << "Down " << i + 1 << ": " << total_passengers_down[i] << " passengers | $"
                      << total_money_down[i] << " total" << std::endl;
        }

        int total_passengers = getTotalPassengers();
        int total_money = getTotalMoney();

        std::cout << "\nTotal Passengers: " << total_passengers << std::endl;
        std::cout << "Total Money: $" << total_money << std::endl;

        // Find and display the train journey with the most passengers
        int max_passengers_index = getMaxPassengersIndex(total_passengers_up);
        std::cout << "\nTrain journey with the most passengers: Up " << max_passengers_index + 1 << std::endl;
    }

private:
    void purchaseTicketsForJourney(int* available_tickets, int* total_passengers, int* total_money, int journeyIndex, int numTickets) {
        if (available_tickets[journeyIndex] >= numTickets) {
            // Calculate total price including group discount
            int total_price = calculateTotalPrice(numTickets);

            // Update ticket availability, total passengers, and total money
            available_tickets[journeyIndex] -= numTickets;
            total_passengers[journeyIndex] += numTickets;
            total_money[journeyIndex] += total_price;

            // Display success message
            std::cout << "Tickets purchased for " << numTickets << " passengers on "
                      << "Journey " << journeyIndex + 1 << " (" << (journeyIndex < NUM_TRAIN_JOURNEYS / 2 ? "Up" : "Down") << "). "
                      << "Total Price: $" << total_price << std::endl;
        } else {
            // Display error message for insufficient tickets
            std::cout << "Error: Insufficient tickets available for Journey " << journeyIndex + 1 << ". "
                      << "Only " << available_tickets[journeyIndex] << " tickets left." << std::endl;
        }
    }

    int calculateTotalPrice(int numTickets) {
        // Calculate total price for the tickets, including group discount
        int total_price = numTickets * TICKET_PRICE;
        if (numTickets >= GROUP_DISCOUNT_THRESHOLD) {
            // Apply group discount for every tenth passenger
            int free_tickets = numTickets / GROUP_DISCOUNT_THRESHOLD;
            total_price -= free_tickets * TICKET_PRICE;
        }
        return total_price;
    }

    int getTotalPassengers() {
        // Get the total number of passengers for the day
        int total_passengers = 0;
        for (int i = 0; i < NUM_TRAIN_JOURNEYS; ++i) {
            total_passengers += total_passengers_up[i] + total_passengers_down[i];
        }
        return total_passengers;
    }

    int getTotalMoney() {
        // Get the total amount of money for the day
        int total_money = 0;
        for (int i = 0; i < NUM_TRAIN_JOURNEYS; ++i) {
            total_money += total_money_up[i] + total_money_down[i];
        }
        return total_money;
    }

    int getMaxPassengersIndex(const int* passengersArray) {
        // Get the index of the train journey with the most passengers
        int max_passengers_index = 0;
        for (int i = 1; i < NUM_TRAIN_JOURNEYS; ++i) {
            if (passengersArray[i] > passengersArray[max_passengers_index]) {
                max_passengers_index = i;
            }
        }
        return max_passengers_index;
    }
};

int main() {
    ElectricMountainRailway railway;

    // Task 1: Start of the day
    railway.displayScreen();

    // Task 2: Purchasing tickets (for testing purposes)
    railway.purchaseTickets();
    railway.purchaseTickets();
    railway.purchaseTickets();

    // Task 3: End of the day
    railway.endOfDayReport();

    return 0;
}
