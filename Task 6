#include <iostream>

// Constants
const double COST_CEMENT = 3;
const double COST_GRAVEL = 2;
const double COST_SAND = 2;
const int DISCOUNT_PACK_CEMENT = 1;
const int DISCOUNT_PACK_GRAVEL = 2;
const int DISCOUNT_PACK_SAND = 2;
const double DISCOUNT_PACK_PRICE = 10;

// Function prototypes
void checkSingleSack();
void checkCustomerOrder();
double checkSingleSackWeight(char contents);
void calculateOrderPrice(int numCement, int numGravel, int numSand);

int main() {
    // Testing Task 1
    checkSingleSack();

    // Testing Task 2
    checkCustomerOrder();

    // Testing Task 3
    int numCement, numGravel, numSand;
    std::cout << "Enter the number of cement sacks for the order: ";
    std::cin >> numCement;
    std::cout << "Enter the number of gravel sacks for the order: ";
    std::cin >> numGravel;
    std::cout << "Enter the number of sand sacks for the order: ";
    std::cin >> numSand;
    calculateOrderPrice(numCement, numGravel, numSand);

    return 0;
}

// Task 1
void checkSingleSack() {
    char contents;
    double weight;

    // Input
    std::cout << "Enter contents (C for cement, G for gravel, S for sand): ";
    std::cin >> contents;
    contents = toupper(contents);
    std::cout << "Enter weight in kilograms: ";
    std::cin >> weight;

    // Check contents
    if (contents != 'C' && contents != 'G' && contents != 'S') {
        std::cout << "Error: Invalid contents. Please enter C, G, or S." << std::endl;
        return;
    }

    // Check weight
    if ((contents == 'C' && !(24.9 < weight && weight < 25.1)) ||
        ((contents == 'G' || contents == 'S') && !(49.9 < weight && weight < 50.1))) {
        std::cout << "Error: Invalid weight for the sack." << std::endl;
        return;
    }

    // Output accepted sack
    std::cout << "Sack accepted - Contents: " << contents << ", Weight: " << weight << " kg" << std::endl;
}

// Task 2
void checkCustomerOrder() {
    int numCement, numGravel, numSand;
    double totalWeight = 0;
    int sacksRejected = 0;

    // Input
    std::cout << "Enter the number of cement sacks: ";
    std::cin >> numCement;
    std::cout << "Enter the number of gravel sacks: ";
    std::cin >> numGravel;
    std::cout << "Enter the number of sand sacks: ";
    std::cin >> numSand;

    // Check and accumulate weight for each sack
    for (int i = 0; i < numCement; ++i)
        totalWeight += checkSingleSackWeight('C');

    for (int i = 0; i < numGravel; ++i)
        totalWeight += checkSingleSackWeight('G');

    for (int i = 0; i < numSand; ++i)
        totalWeight += checkSingleSackWeight('S');

    // Output
    std::cout << "Total weight of the order: " << totalWeight << " kg" << std::endl;
    std::cout << "Number of sacks rejected: " << sacksRejected << std::endl;
}

// Helper function for Task 2
double checkSingleSackWeight(char contents) {
    double weight;

    std::cout << "Enter weight for " << contents << " sack in kilograms: ";
    std::cin >> weight;

    if ((contents == 'C' && !(24.9 < weight && weight < 25.1)) ||
        ((contents == 'G' || contents == 'S') && !(49.9 < weight && weight < 50.1))) {
        std::cout << "Error: Invalid weight for " << contents << " sack." << std::endl;
        return 0;
    }

    return weight;
}

// Task 3
void calculateOrderPrice(int numCement, int numGravel, int numSand) {
    // Calculate regular price
    double regularPrice = (numCement * COST_CEMENT) + (numGravel * COST_GRAVEL) + (numSand * COST_SAND);

    // Calculate discount packs
    int numDiscountPacks = std::min(numCement, std::min(numGravel / DISCOUNT_PACK_GRAVEL, numSand / DISCOUNT_PACK_SAND));

    // Calculate total price with discount
    double totalPrice = regularPrice - (numDiscountPacks * DISCOUNT_PACK_PRICE);

    // Output
    std::cout << "Regular price for the order: $" << regularPrice << std::endl;
    std::cout << "Number of discount packs applied: " << numDiscountPacks << std::endl;
    std::cout << "Discounted price for the order: $" << totalPrice << std::endl;
    std::cout << "Amount saved: $" << regularPrice - totalPrice << std::endl;
}
