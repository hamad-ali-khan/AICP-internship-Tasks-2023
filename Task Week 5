#include <iostream>
#include <conio.h>

using namespace std;

const int SIZE = 4;
char board[SIZE][SIZE];
void initializeBoard()
{
	for (int i = 1; i < SIZE; i++)
	{
		for (int j = 1; j < SIZE; j++)
		{
			board[i][j] = ' ';
		}
	}
}

void displayBoard()
{
	for (int i = 1; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			cout<<board[i][j] <<" | ";
		}
		cout<<endl;
		if (i < SIZE - 1)
		{
			cout<<" |===|====|====| "<<endl;
		}
	}
}

void getMove (char player, int& row, int& column)
{
	cout<<"Player" <<player << ", Enter your move (row, column):";
	cin>>row>>column;
}

bool isWinner(char player)
{
	//check for horizontal wins
	for (int i=1; i<SIZE; i++)
	{
		bool winningRow = true;
		for(int j=	1; j< SIZE; j++)
		{
			if (board[i][j] != player)
			{
				winningRow = false;
				break;
			}
		}
		if (winningRow){
			return true;
		}
	}

//check for vertical win
for (int i = 1; i < SIZE; i++)
{
	bool winningColumn = true;
	for (int j=1; j < SIZE; j++)
	{
		if (board[j][i] != player)
		{
			winningColumn = false;
			break;
		}
	}
	if (winningColumn)
	{
		return true;
	}
}

//check for  Diagonal Wins 
if (board[1][1] == player && board[2][2] == player && board[3][3] == player)
{
	return true;
}
if (board[1][3] == player && board[2][2] == player && board[3][1] == player)
{
	return true;
}

return false;
}

bool isBoardFull()
{
	for (int i = 1; i < SIZE; i++)
	{
		for (int j=1; j<SIZE; j++)
		{
			if (board[i][j] == ' ')
			{
				return false;
			}
		}
	}
	return false;
}

int main()
{
	initializeBoard();
	char currentPlayer = 'X';
	bool isGameOver = false;
	
	while (!isGameOver)
	{
		displayBoard();
		
		int row, column;
		getMove(currentPlayer, row, column);
		
		if (board[row][column] == ' ')
		{
			board[row][column] = currentPlayer;
		}
		else{
			cout<<"Invalid move. Please try again." <<endl;
			continue;
		}
		
		if (isWinner(currentPlayer))
		{
			isGameOver = true;
			displayBoard();
			cout<< "Player" <<currentPlayer <<"Wins!" <<endl;
			
		}
		else if (isBoardFull()){
			isGameOver = true;
			displayBoard();
			cout <<"Game is a draw" <<endl;
		}
		currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
	}
	return 0;
	
}
